// Configuraci√≥n autom√°tica de Firebase para actualizaciones
import { doc, setDoc, getDoc } from 'firebase/firestore';
import { db } from '../firebase/config';

class AutoFirebaseSetup {
  constructor() {
    this.isSetup = false;
    this.setupPromise = null;
  }

  // Configurar Firebase autom√°ticamente
  async setupFirebaseUpdates() {
    if (this.isSetup) return true;
    if (this.setupPromise) return this.setupPromise;

    console.log('üî• Configurando Firebase autom√°ticamente...');
    
    this.setupPromise = this._performSetup();
    return this.setupPromise;
  }

  async _performSetup() {
    try {
      // Verificar si ya existe la configuraci√≥n
      const versionDoc = await this._checkExistingSetup();
      
      if (versionDoc) {
        console.log('‚úÖ Firebase ya est√° configurado');
        this.isSetup = true;
        return true;
      }

      // Crear la configuraci√≥n autom√°ticamente
      await this._createVersionDocument();
      
      console.log('‚úÖ Firebase configurado autom√°ticamente');
      this.isSetup = true;
      return true;
      
    } catch (error) {
      console.error('‚ùå Error configurando Firebase:', error);
      return false;
    }
  }

  // Verificar si ya existe la configuraci√≥n
  async _checkExistingSetup() {
    try {
      console.log('üîç Verificando configuraci√≥n existente...');
      const docRef = doc(db, 'app', 'version');
      const docSnap = await getDoc(docRef);
      
      if (docSnap.exists()) {
        const data = docSnap.data();
        console.log('üì¶ Configuraci√≥n encontrada:', data.version);
        return data;
      }
      
      console.log('‚ö†Ô∏è No hay configuraci√≥n existente');
      return null;
    } catch (error) {
      console.log('‚ö†Ô∏è Error verificando configuraci√≥n:', error.message);
      return null;
    }
  }

  // Crear el documento de versi√≥n autom√°ticamente
  async _createVersionDocument() {
    console.log('üìù Creando configuraci√≥n de versi√≥n...');
    
    const currentVersion = process.env.REACT_APP_VERSION || '1.0.83';
    const nextVersion = this._incrementVersion(currentVersion);
    
    const versionData = {
      version: nextVersion,
      buildDate: new Date().toISOString(),
      platform: 'android',
      versionType: 'patch',
      features: [
        'Sistema de inventario completo',
        'Gesti√≥n de ventas optimizada',
        'Actualizaciones autom√°ticas con Firebase',
        'Sin problemas de rate limit',
        'Notificaciones en tiempo real',
        'Configuraci√≥n autom√°tica de base de datos',
        'Interfaz de usuario mejorada'
      ],
      releaseNotes: `Versi√≥n ${nextVersion} - Sistema de actualizaciones autom√°tico con Firebase`,
      downloads: {
        android: `https://github.com/LautaroBravo08/namustock-app/releases/download/v${nextVersion}/namustock-${nextVersion}.apk`,
        ios: `https://github.com/LautaroBravo08/namustock-app/releases/download/v${nextVersion}/namustock-${nextVersion}.ipa`
      },
      baseUrl: 'https://github.com/LautaroBravo08/namustock-app',
      updateSystem: {
        source: 'firebase',
        autoSetup: true,
        cacheEnabled: false,
        realTimeUpdates: true,
        supportedPlatforms: ['android'],
        platformRestriction: 'android-only'
      },
      lastUpdated: new Date().toISOString(),
      autoCreated: true
    };

    const docRef = doc(db, 'app', 'version');
    await setDoc(docRef, versionData);
    
    console.log('‚úÖ Documento de versi√≥n creado:', nextVersion);
    return versionData;
  }

  // Incrementar versi√≥n autom√°ticamente
  _incrementVersion(version) {
    const parts = version.split('.').map(Number);
    parts[2]++; // Incrementar patch
    return parts.join('.');
  }

  // Actualizar versi√≥n (para releases futuros)
  async updateVersion(newVersion, releaseNotes = null) {
    try {
      console.log('üîÑ Actualizando versi√≥n a:', newVersion);
      
      const versionData = {
        version: newVersion,
        buildDate: new Date().toISOString(),
        platform: 'android',
        versionType: 'patch',
        features: [
          'Sistema de inventario completo',
          'Gesti√≥n de ventas optimizada',
          'Actualizaciones autom√°ticas con Firebase',
          'Sin problemas de rate limit',
          'Notificaciones en tiempo real',
          'Configuraci√≥n autom√°tica de base de datos',
          'Interfaz de usuario mejorada'
        ],
        releaseNotes: releaseNotes || `Versi√≥n ${newVersion} - Actualizaci√≥n autom√°tica`,
        downloads: {
          android: `https://github.com/LautaroBravo08/namustock-app/releases/download/v${newVersion}/namustock-${newVersion}.apk`,
          ios: `https://github.com/LautaroBravo08/namustock-app/releases/download/v${newVersion}/namustock-${newVersion}.ipa`
        },
        baseUrl: 'https://github.com/LautaroBravo08/namustock-app',
        updateSystem: {
          source: 'firebase',
          autoSetup: true,
          cacheEnabled: false,
          realTimeUpdates: true,
          supportedPlatforms: ['android'],
          platformRestriction: 'android-only'
        },
        lastUpdated: new Date().toISOString(),
        autoUpdated: true
      };

      const docRef = doc(db, 'app', 'version');
      await setDoc(docRef, versionData);
      
      console.log('‚úÖ Versi√≥n actualizada exitosamente:', newVersion);
      return { success: true, version: newVersion };
      
    } catch (error) {
      console.error('‚ùå Error actualizando versi√≥n:', error);
      return { success: false, error: error.message };
    }
  }

  // Verificar estado de la configuraci√≥n
  async getSetupStatus() {
    try {
      const docRef = doc(db, 'app', 'version');
      const docSnap = await getDoc(docRef);
      
      if (docSnap.exists()) {
        const data = docSnap.data();
        return {
          configured: true,
          version: data.version,
          lastUpdated: data.lastUpdated,
          autoCreated: data.autoCreated || false
        };
      }
      
      return { configured: false };
    } catch (error) {
      return { configured: false, error: error.message };
    }
  }
}

// Instancia singleton
const autoFirebaseSetup = new AutoFirebaseSetup();
export default autoFirebaseSetup;