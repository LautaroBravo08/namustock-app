#!/usr/bin/env node

/**
 * Script para probar el sistema completo de actualizaciones autom√°ticas con Firebase
 * Verifica que todo est√© configurado correctamente
 */

const fs = require('fs');

// Colores para la consola
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStep(step, message) {
  log(`\n${step} ${message}`, 'bright');
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

// Verificar archivos del sistema autom√°tico
function checkAutomaticSystem() {
  logStep('üî•', 'Verificando sistema autom√°tico de Firebase...');
  
  const requiredFiles = [
    {
      path: 'src/services/firebaseUpdateService.js',
      desc: 'Servicio principal de Firebase'
    },
    {
      path: 'src/services/autoFirebaseSetup.js',
      desc: 'Configuraci√≥n autom√°tica de Firebase'
    },
    {
      path: 'src/services/autoUpdateManager.js',
      desc: 'Gestor autom√°tico de actualizaciones'
    },
    {
      path: 'auto-firebase-release.js',
      desc: 'Script de release autom√°tico con Firebase'
    },
    {
      path: 'src/firebase/firestore.js',
      desc: 'Funciones de Firebase actualizadas'
    }
  ];
  
  let allExist = true;
  
  requiredFiles.forEach(({ path, desc }) => {
    if (fs.existsSync(path)) {
      logSuccess(`${desc} ‚úì`);
    } else {
      logError(`${desc} ‚úó (${path})`);
      allExist = false;
    }
  });
  
  return allExist;
}

// Verificar scripts de package.json
function checkPackageScripts() {
  logStep('üìú', 'Verificando scripts autom√°ticos...');
  
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const scripts = packageJson.scripts;
    
    const expectedScripts = [
      'release',
      'release:firebase',
      'release:firebase:patch',
      'release:firebase:minor',
      'release:firebase:major'
    ];
    
    let allScriptsExist = true;
    
    expectedScripts.forEach(script => {
      if (scripts[script] && scripts[script].includes('auto-firebase-release.js')) {
        logSuccess(`Script ${script} configurado correctamente`);
      } else {
        logError(`Script ${script} no configurado o incorrecto`);
        allScriptsExist = false;
      }
    });
    
    return allScriptsExist;
  } catch (error) {
    logError(`Error verificando package.json: ${error.message}`);
    return false;
  }
}

// Verificar configuraci√≥n actual
function checkCurrentConfig() {
  logStep('‚öôÔ∏è', 'Verificando configuraci√≥n actual...');
  
  try {
    // Verificar package.json
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    logInfo(`Versi√≥n actual: ${packageJson.version}`);
    
    // Verificar .env.local
    if (fs.existsSync('.env.local')) {
      const envContent = fs.readFileSync('.env.local', 'utf8');
      const versionMatch = envContent.match(/REACT_APP_VERSION=(.+)/);
      if (versionMatch) {
        logInfo(`Versi√≥n en .env.local: ${versionMatch[1]}`);
        
        // Verificar si est√° configurado para ver actualizaciones
        if (versionMatch[1] !== packageJson.version) {
          logSuccess('Configurado para detectar actualizaciones');
        } else {
          logWarning('Misma versi√≥n - no detectar√° actualizaciones');
        }
      }
    }
    
    // Verificar Firebase config
    if (fs.existsSync('src/firebase/config.js')) {
      logSuccess('Configuraci√≥n de Firebase encontrada');
    } else {
      logError('Configuraci√≥n de Firebase no encontrada');
      return false;
    }
    
    return true;
  } catch (error) {
    logError(`Error verificando configuraci√≥n: ${error.message}`);
    return false;
  }
}

// Mostrar c√≥mo funciona el sistema autom√°tico
function showAutomaticSystemFlow() {
  logStep('üîÑ', 'C√≥mo funciona el sistema autom√°tico');
  
  log('\n1Ô∏è‚É£ Al abrir la aplicaci√≥n:', 'cyan');
  log('   üî• FirebaseUpdateService se inicializa', 'cyan');
  log('   üîß autoFirebaseSetup configura Firebase autom√°ticamente', 'cyan');
  log('   üì¶ Si no existe, crea el documento app/version', 'cyan');
  log('   üîÑ Configura listener en tiempo real', 'cyan');
  log('   ‚úÖ Sistema listo sin configuraci√≥n manual', 'cyan');
  
  log('\n2Ô∏è‚É£ Al crear un nuevo release:', 'blue');
  log('   üöÄ node auto-firebase-release.js patch', 'blue');
  log('   üì¶ Ejecuta release normal (GitHub, APK, etc.)', 'blue');
  log('   üî• Actualiza Firebase autom√°ticamente', 'blue');
  log('   üì± Usuarios reciben notificaci√≥n instant√°nea', 'blue');
  log('   ‚ö° Todo autom√°tico, sin pasos manuales', 'blue');
  
  log('\n3Ô∏è‚É£ Para los usuarios:', 'green');
  log('   üì± Solo Android: Reciben actualizaciones', 'green');
  log('   üåê Web/iOS: Mensaje informativo', 'green');
  log('   ‚ö° Notificaciones en tiempo real (< 100ms)', 'green');
  log('   üîÑ Sin necesidad de recargar o presionar botones', 'green');
}

// Mostrar comandos disponibles
function showAvailableCommands() {
  logStep('üéØ', 'Comandos disponibles');
  
  log('\nüì¶ Releases autom√°ticos:', 'cyan');
  log('   npm run release              # Patch autom√°tico', 'cyan');
  log('   npm run release:patch        # 1.0.83 ‚Üí 1.0.84', 'cyan');
  log('   npm run release:minor        # 1.0.83 ‚Üí 1.1.0', 'cyan');
  log('   npm run release:major        # 1.0.83 ‚Üí 2.0.0', 'cyan');
  
  log('\nüî• Espec√≠ficos de Firebase:', 'blue');
  log('   npm run release:firebase     # Patch con Firebase', 'blue');
  log('   npm run release:firebase:patch', 'blue');
  log('   npm run release:firebase:minor', 'blue');
  log('   npm run release:firebase:major', 'blue');
  
  log('\nüß™ Pruebas:', 'yellow');
  log('   npm start                    # Probar en navegador', 'yellow');
  log('   npm run android              # Probar en Android', 'yellow');
  log('   node test-sistema-completo.js # Este script', 'yellow');
}

// Mostrar pr√≥ximos pasos
function showNextSteps() {
  logStep('üöÄ', 'Pr√≥ximos pasos');
  
  log('\n1Ô∏è‚É£ Probar el sistema:', 'green');
  log('   npm start', 'green');
  log('   Abrir DevTools ‚Üí Console', 'green');
  log('   Buscar: "üî• FirebaseUpdateService inicializado"', 'green');
  log('   Buscar: "üîß Configurando Firebase autom√°ticamente"', 'green');
  
  log('\n2Ô∏è‚É£ Crear un release de prueba:', 'blue');
  log('   npm run release:patch', 'blue');
  log('   Esto har√° TODO autom√°ticamente:', 'blue');
  log('   ‚Ä¢ Build de la aplicaci√≥n', 'blue');
  log('   ‚Ä¢ Generaci√≥n del APK', 'blue');
  log('   ‚Ä¢ Subida a GitHub', 'blue');
  log('   ‚Ä¢ Configuraci√≥n de Firebase', 'blue');
  log('   ‚Ä¢ Notificaci√≥n a usuarios', 'blue');
  
  log('\n3Ô∏è‚É£ Verificar que funciona:', 'cyan');
  log('   Los usuarios conectados deber√≠an recibir', 'cyan');
  log('   la notificaci√≥n de actualizaci√≥n instant√°neamente', 'cyan');
  
  log('\nüí° Ventajas del sistema autom√°tico:', 'yellow');
  log('   ‚Ä¢ Sin configuraci√≥n manual de Firebase', 'yellow');
  log('   ‚Ä¢ Sin problemas de rate limit', 'yellow');
  log('   ‚Ä¢ Actualizaciones en tiempo real', 'yellow');
  log('   ‚Ä¢ Un solo comando para todo', 'yellow');
  log('   ‚Ä¢ Funciona desde el primer uso', 'yellow');
}

// Funci√≥n principal
async function main() {
  log('\nüî• Probando sistema completo de actualizaciones autom√°ticas...', 'bright');
  
  try {
    // Verificar archivos del sistema
    const filesOk = checkAutomaticSystem();
    
    // Verificar scripts
    const scriptsOk = checkPackageScripts();
    
    // Verificar configuraci√≥n
    const configOk = checkCurrentConfig();
    
    // Mostrar c√≥mo funciona
    showAutomaticSystemFlow();
    
    // Mostrar comandos
    showAvailableCommands();
    
    // Mostrar pr√≥ximos pasos
    showNextSteps();
    
    // Resumen final
    logStep('üìã', 'Estado del sistema autom√°tico');
    
    if (filesOk && scriptsOk && configOk) {
      logSuccess('‚úÖ Sistema autom√°tico completamente listo');
      
      log('\nüéØ Resumen:', 'green');
      log('   ‚Ä¢ Todos los archivos necesarios est√°n presentes', 'green');
      log('   ‚Ä¢ Scripts de package.json configurados', 'green');
      log('   ‚Ä¢ Firebase se configurar√° autom√°ticamente', 'green');
      log('   ‚Ä¢ Un solo comando hace todo el proceso', 'green');
      
      log('\nüöÄ ¬°Listo para usar!', 'bright');
      log('   Ejecuta: npm run release:patch', 'bright');
      log('   Y todo se har√° autom√°ticamente', 'bright');
      
    } else {
      logWarning('‚ö†Ô∏è Algunos componentes pueden estar faltando');
      logInfo('Revisa los errores arriba');
    }
    
    return filesOk && scriptsOk && configOk;
    
  } catch (error) {
    logError(`Error durante la verificaci√≥n: ${error.message}`);
    return false;
  }
}

// Ejecutar verificaci√≥n
main().then(success => {
  process.exit(success ? 0 : 1);
});