#!/usr/bin/env node

/**
 * Script para configurar el sistema de actualizaciones basado en Firebase
 * Inicializa la base de datos con la informaci√≥n de versi√≥n actual
 */

const fs = require('fs');

// Colores para la consola
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStep(step, message) {
  log(`\n${step} ${message}`, 'bright');
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

// Leer informaci√≥n actual de versi√≥n
function getCurrentVersionInfo() {
  try {
    // Leer package.json
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const version = packageJson.version;
    
    // Leer version.json si existe
    let versionJson = null;
    if (fs.existsSync('public/version.json')) {
      versionJson = JSON.parse(fs.readFileSync('public/version.json', 'utf8'));
    }
    
    return {
      version: version,
      versionJson: versionJson,
      packageJson: packageJson
    };
  } catch (error) {
    logError(`Error leyendo informaci√≥n de versi√≥n: ${error.message}`);
    return null;
  }
}

// Generar estructura de datos para Firebase
function generateFirebaseVersionData(versionInfo) {
  const { version, versionJson } = versionInfo;
  
  return {
    version: version,
    buildDate: new Date().toISOString(),
    platform: 'android',
    versionType: versionJson?.versionType || 'patch',
    features: versionJson?.features || [
      'Sistema de inventario completo',
      'Gesti√≥n de ventas optimizada',
      'Actualizaciones en tiempo real con Firebase',
      'Sin problemas de rate limit',
      'Notificaciones instant√°neas de nuevas versiones',
      'Interfaz de usuario mejorada'
    ],
    releaseNotes: versionJson?.releaseNotes || `Versi√≥n ${version} - Sistema de actualizaciones con Firebase`,
    downloads: {
      android: `https://github.com/LautaroBravo08/namustock-app/releases/download/v${version}/namustock-${version}.apk`,
      ios: `https://github.com/LautaroBravo08/namustock-app/releases/download/v${version}/namustock-${version}.ipa`
    },
    baseUrl: 'https://github.com/LautaroBravo08/namustock-app',
    updateSystem: {
      source: 'firebase',
      cacheEnabled: false,
      realTimeUpdates: true,
      supportedPlatforms: ['android'],
      platformRestriction: 'android-only'
    },
    lastUpdated: new Date().toISOString()
  };
}

// Mostrar instrucciones para configurar Firebase
function showFirebaseSetupInstructions() {
  logStep('üî•', 'Instrucciones para configurar Firebase');
  
  log('\nüìã Pasos para configurar el sistema de actualizaciones:', 'cyan');
  
  log('\n1Ô∏è‚É£ Configurar la base de datos:', 'cyan');
  log('   ‚Ä¢ Abre Firebase Console: https://console.firebase.google.com/', 'cyan');
  log('   ‚Ä¢ Ve a tu proyecto NamuStock', 'cyan');
  log('   ‚Ä¢ Ve a Firestore Database', 'cyan');
  log('   ‚Ä¢ Crea una colecci√≥n llamada "app"', 'cyan');
  log('   ‚Ä¢ Crea un documento con ID "version"', 'cyan');
  
  log('\n2Ô∏è‚É£ Estructura del documento "version":', 'blue');
  const versionInfo = getCurrentVersionInfo();
  if (versionInfo) {
    const firebaseData = generateFirebaseVersionData(versionInfo);
    log('   Copia y pega estos datos en el documento:', 'blue');
    log('   ```json', 'blue');
    log(JSON.stringify(firebaseData, null, 2), 'blue');
    log('   ```', 'blue');
  }
  
  log('\n3Ô∏è‚É£ Configurar reglas de seguridad:', 'yellow');
  log('   ‚Ä¢ Ve a Firestore ‚Üí Rules', 'yellow');
  log('   ‚Ä¢ Agrega estas reglas:', 'yellow');
  log('   ```', 'yellow');
  log('   rules_version = "2";', 'yellow');
  log('   service cloud.firestore {', 'yellow');
  log('     match /databases/{database}/documents {', 'yellow');
  log('       // Permitir lectura de informaci√≥n de versi√≥n', 'yellow');
  log('       match /app/version {', 'yellow');
  log('         allow read: if true;', 'yellow');
  log('         allow write: if false; // Solo administradores', 'yellow');
  log('       }', 'yellow');
  log('       // Permitir escritura de logs de actualizaci√≥n', 'yellow');
  log('       match /app/analytics/updateLogs/{document} {', 'yellow');
  log('         allow create: if true;', 'yellow');
  log('         allow read, update, delete: if false;', 'yellow');
  log('       }', 'yellow');
  log('     }', 'yellow');
  log('   }', 'yellow');
  log('   ```', 'yellow');
  
  log('\n4Ô∏è‚É£ Actualizar el UpdateService:', 'green');
  log('   ‚Ä¢ El nuevo FirebaseUpdateService ya est√° creado', 'green');
  log('   ‚Ä¢ Solo necesitas cambiar la importaci√≥n en los componentes', 'green');
  log('   ‚Ä¢ Cambiar: import updateService from "../services/updateService"', 'green');
  log('   ‚Ä¢ Por: import updateService from "../services/firebaseUpdateService"', 'green');
}

// Mostrar beneficios del sistema Firebase
function showFirebaseBenefits() {
  logStep('üöÄ', 'Beneficios del sistema Firebase');
  
  log('\nüí° Ventajas sobre GitHub API:', 'green');
  log('   ‚Ä¢ Sin problemas de rate limit', 'green');
  log('   ‚Ä¢ Actualizaciones en tiempo real', 'green');
  log('   ‚Ä¢ Mucho m√°s r√°pido (< 100ms vs varios segundos)', 'green');
  log('   ‚Ä¢ No depende de conexi√≥n a GitHub', 'green');
  log('   ‚Ä¢ Funciona offline con cache de Firebase', 'green');
  
  log('\nüîÑ Actualizaciones en tiempo real:', 'blue');
  log('   ‚Ä¢ Los usuarios reciben notificaciones instant√°neas', 'blue');
  log('   ‚Ä¢ No necesitan recargar la app', 'blue');
  log('   ‚Ä¢ No necesitan presionar "Comprobar actualizaciones"', 'blue');
  log('   ‚Ä¢ Sistema push autom√°tico', 'blue');
  
  log('\nüìä Analytics y monitoreo:', 'cyan');
  log('   ‚Ä¢ Registro autom√°tico de intentos de actualizaci√≥n', 'cyan');
  log('   ‚Ä¢ Estad√≠sticas de √©xito/fallo', 'cyan');
  log('   ‚Ä¢ Informaci√≥n de plataformas', 'cyan');
  log('   ‚Ä¢ Datos para mejorar el sistema', 'cyan');
  
  log('\nüîß Facilidad de mantenimiento:', 'yellow');
  log('   ‚Ä¢ Actualizar versi√≥n desde Firebase Console', 'yellow');
  log('   ‚Ä¢ No necesita rebuild de la app', 'yellow');
  log('   ‚Ä¢ Cambios instant√°neos para todos los usuarios', 'yellow');
  log('   ‚Ä¢ Control granular de releases', 'yellow');
}

// Generar script de actualizaci√≥n autom√°tica
function generateUpdateScript() {
  logStep('üìù', 'Generando script de actualizaci√≥n autom√°tica');
  
  const versionInfo = getCurrentVersionInfo();
  if (!versionInfo) return;
  
  const scriptContent = `#!/usr/bin/env node

/**
 * Script para actualizar la versi√≥n en Firebase autom√°ticamente
 * Se ejecuta despu√©s de crear un nuevo release
 */

const admin = require('firebase-admin');

// Configurar Firebase Admin (necesitas el archivo de credenciales)
// const serviceAccount = require('./path/to/serviceAccountKey.json');
// admin.initializeApp({
//   credential: admin.credential.cert(serviceAccount)
// });

const db = admin.firestore();

async function updateFirebaseVersion() {
  const versionData = ${JSON.stringify(generateFirebaseVersionData(versionInfo), null, 2)};
  
  try {
    await db.collection('app').doc('version').set(versionData);
    console.log('‚úÖ Versi√≥n actualizada en Firebase:', versionData.version);
  } catch (error) {
    console.error('‚ùå Error actualizando Firebase:', error);
  }
}

updateFirebaseVersion();`;
  
  fs.writeFileSync('update-firebase-version.js', scriptContent);
  logSuccess('Script generado: update-firebase-version.js');
  logInfo('Configura las credenciales de Firebase Admin para usarlo');
}

// Mostrar comparaci√≥n de rendimiento
function showPerformanceComparison() {
  logStep('‚ö°', 'Comparaci√≥n de rendimiento');
  
  log('\nüìä GitHub API vs Firebase:', 'bright');
  
  const comparison = [
    ['Aspecto', 'GitHub API', 'Firebase'],
    ['Velocidad', '2-5 segundos', '< 100ms'],
    ['Rate Limit', '60/hora sin token', 'Sin l√≠mites'],
    ['Tiempo real', 'No', 'S√≠'],
    ['Cache necesario', 'S√≠ (10 min)', 'No'],
    ['Retry necesario', 'S√≠ (3 intentos)', 'No'],
    ['Fallback necesario', 'S√≠', 'No'],
    ['Offline', 'No funciona', 'Cache autom√°tico'],
    ['Complejidad', 'Alta', 'Baja'],
    ['Mantenimiento', 'Complejo', 'Simple']
  ];
  
  comparison.forEach(([aspect, github, firebase], index) => {
    if (index === 0) {
      log(`   ${aspect.padEnd(15)} | ${github.padEnd(15)} | ${firebase}`, 'cyan');
      log('   ' + '-'.repeat(50), 'cyan');
    } else {
      const githubColor = github.includes('No') || github.includes('S√≠ (') ? 'red' : 'yellow';
      const firebaseColor = firebase.includes('S√≠') || firebase.includes('< ') || firebase.includes('Sin') ? 'green' : 'yellow';
      
      log(`   ${aspect.padEnd(15)} | `, 'reset');
      process.stdout.write(`${colors[githubColor]}${github.padEnd(15)}${colors.reset} | `);
      log(`${firebase}`, firebaseColor);
    }
  });
}

// Funci√≥n principal
async function main() {
  log('\nüî• Configurando sistema de actualizaciones con Firebase...', 'bright');
  
  try {
    // Obtener informaci√≥n actual
    const versionInfo = getCurrentVersionInfo();
    
    if (!versionInfo) {
      logError('No se pudo obtener informaci√≥n de versi√≥n');
      return false;
    }
    
    logSuccess(`Versi√≥n actual detectada: ${versionInfo.version}`);
    
    // Mostrar instrucciones
    showFirebaseSetupInstructions();
    
    // Mostrar beneficios
    showFirebaseBenefits();
    
    // Mostrar comparaci√≥n
    showPerformanceComparison();
    
    // Generar script de actualizaci√≥n
    generateUpdateScript();
    
    // Resumen final
    logStep('üìã', 'Resumen de la implementaci√≥n');
    
    log('\nüéØ Estado actual:', 'green');
    log('   ‚Ä¢ FirebaseUpdateService creado', 'green');
    log('   ‚Ä¢ Funciones de Firebase implementadas', 'green');
    log('   ‚Ä¢ Sistema de tiempo real configurado', 'green');
    log('   ‚Ä¢ Analytics de actualizaciones incluido', 'green');
    log('   ‚Ä¢ Solo falta configurar la base de datos', 'green');
    
    log('\nüöÄ Pr√≥ximos pasos:', 'blue');
    log('   1. Configurar Firebase seg√∫n las instrucciones arriba', 'blue');
    log('   2. Cambiar las importaciones en los componentes', 'blue');
    log('   3. Probar el sistema', 'blue');
    log('   4. ¬°Disfrutar de actualizaciones instant√°neas!', 'blue');
    
    return true;
    
  } catch (error) {
    logError(`Error durante la configuraci√≥n: ${error.message}`);
    return false;
  }
}

// Ejecutar configuraci√≥n
main().then(success => {
  process.exit(success ? 0 : 1);
});